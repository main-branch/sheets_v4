#!/usr/bin/env ruby
# frozen_string_literal: true

require 'discovery_v1'
require 'discovery_v1/google_extensions'
require 'sheets_v4'
require 'googleauth'

# Example to show using the SheetsV4 module to set the background color of a cell
#
# GIVEN the credential file is at ~/.google-api-credential.json
#   AND the spreadsheet id is 18FAcgotK7nDfLTOTQuGCIjKwxkJMAguhn1OVzpFFgWY
#   AND the spreadsheet has a sheet whose id is 0
# WHEN the script is run
# THEN the sheet whose id is 0 will have the background color names starting at A2
#   AND the background color of the cells in column B will be set to the color matching the color name in column A

# Build the requests

def name_rows
  SheetsV4.color_names.map do |color_name|
    { values: [{ user_entered_value: { string_value: color_name.to_s } }] }
  end
end

def write_names
  rows = name_rows
  fields = 'user_entered_value'
  start = { sheet_id: 0, row_index: 1, column_index: 0 }
  { update_cells: { rows:, fields:, start: } }
end

def background_color_rows
  SheetsV4.color_names.map { |color_name| SheetsV4.color(color_name) }.map do |color|
    { values: [{ user_entered_format: { background_color: color } }] }
  end
end

def set_background_colors
  rows = background_color_rows
  fields = 'user_entered_format'
  start = { sheet_id: 0, row_index: 1, column_index: 1 }
  { update_cells: { rows:, fields:, start: } }
end

def requests = { requests: [write_names, set_background_colors] }

# OPTIONAL: validate the requests against the schema before sending them to the API.
#
# While not necessary, it can be helpful to identify errors since the API will return
# an error if the request is invalid but does not tell you where the problem is.
#
rest_description = DiscoveryV1.discovery_service.get_rest_api('sheets', 'v4')
rest_description.validate_object(schema_name: 'batch_update_spreadsheet_request', object: requests)

spreadsheet_id = '18FAcgotK7nDfLTOTQuGCIjKwxkJMAguhn1OVzpFFgWY'
SheetsV4.sheets_service.batch_update_spreadsheet(spreadsheet_id, requests)
